#===============================================================================
# Copyright 2020 Intel Corporation
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#===============================================================================

##  Content:
##     oneAPI Data Analytics Library examples build and run
##******************************************************************************

help:
	@echo "Usage: make {libia32|soia32|libintel64|sointel64|help}"
	@echo "[example=name] [compiler=compiler_name] [mode=mode_name] [threading=threading_name]"
	@echo
	@echo "name              - example name. Please see daal.lst file"
	@echo
	@echo "compiler_name     - can be intel, gnu or clang. Default value is gnu."
	@echo
	@echo "threading_name    - can be parallel or sequential. Default value is parallel."
	@echo
	@echo "mode_name         - can be build or run. Default is run"

##------------------------------------------------------------------------------
## examples of using:
##
## make libia32 example=assoc_rules_apriori_batch  - build  by Intel(R) C++ Compiler (as default)
##                                 and  run  association_rules  example  for 32-bit
##                                 applications, static linking
##
## make soia32 compiler=gnu      - build by GNU C++ compiler and run all examples
##                                 of Intel(R) DAAL for
##                                 32-bit applications, dynamic linking
##
## make libintel64 compiler=gnu  - build by GNU C++ compiler and run all example
##                                 of Intel(R) DAAL for
##                                 Intel(R) 64 processor family applications,
##                                 static linking
##
## make sointel64                - build by Intel(R) C++ Compiler (as default)
##                                 and run all examples for Intel(R)64 processor
##                                 family  applications, dynamic linking
##
## make sointel64 mode=build     - build only (not run) by Intel(R) C++ Compiler
##                                 (as default) all examples for Intel(R)64
##                                 processor family  applications, dynamic linking
##
## make help                     - show help
##
##------------------------------------------------------------------------------

include daal.lst

ifndef example
    example = $(DAAL)
endif

ifneq ($(compiler),gnu)
    ifneq ($(compiler),clang)
        override compiler = intel
    endif
endif

ifneq ($(mode),build)
    override mode = run
endif

ifndef DAALROOT
    DAALROOT = ./../../..
endif
DAAL_PATH = $(DAALROOT)/lib/$(_IA)

ifndef TBBROOT
    TBBROOT = ./../../../../../tbb/latest
endif
TBB_PATH = $(TBBROOT)/lib/$(_IA)/gcc4.8

ifeq ($(RES_EXT),so)
    -B := -Bdynamic
else
    -B := -Bstatic
endif

ifeq ($(threading),sequential)
    THREADING_LIB := daal_sequential
else
    override threading = parallel
    THREADING_LIB := daal_thread
endif

COPTS := -std=c++17 \
         -pedantic \
         -Wall \
         -Wextra \
         -Werror \
         -Werror=return-type \
         -Werror=uninitialized \
         -Werror=unknown-pragmas \
         -Wno-unused-parameter \
         -I./source \
         -I"$(DAALROOT)/include"

LIBS := $(-B) -lonedal \
        $(-B) -ldaal_core \
        $(-B) -l$(THREADING_LIB) \
        -Bdynamic -ltbb \
        -Bdynamic -ltbbmalloc \
        -Bdynamic -lpthread \
        -Bdynamic -ldl

LOPTS := -L"$(DAAL_PATH)" \
         -L"$(TBB_PATH)" \
         $(LIBS)

RES_DIR=_results/$(compiler)_$(_IA)_$(threading)_$(RES_EXT)
RES = $(addprefix $(RES_DIR)/, $(if $(filter run, $(mode)), $(addsuffix .res ,$(example)), $(addsuffix .exe,$(example))))

ifeq ($(compiler),intel)
    CC = icc
    COPTS += $(if $(COVFILE), $(if $(filter ia32, $(_IA)), -m32, -m64))
endif

ifeq ($(compiler),gnu)
    CC = g++
    COPTS += $(if $(filter ia32, $(_IA)), -m32, -m64)
endif

ifeq ($(compiler),clang)
    gcc_toolchain := $(realpath $(dir $(shell which gcc))/..)
    CC = clang++ --gcc-toolchain=$(gcc_toolchain)
    COPTS += $(if $(filter ia32, $(_IA)), -m32, -m64)
endif

CC := $(if $(COVFILE), cov01 -1; covc -i  $(CC),$(CC))

libia32:
	$(MAKE) _make_ex _IA=ia32 RES_EXT=a
soia32:
	$(MAKE) _make_ex _IA=ia32 RES_EXT=so
libintel64:
	$(MAKE) _make_ex _IA=intel64 RES_EXT=a
sointel64:
	$(MAKE) _make_ex _IA=intel64 RES_EXT=so


_make_ex: $(RES)

vpath
vpath %.cpp $(addprefix ./source/,kmeans kmeans_init knn linear_kernel pca rbf_kernel svm)

.SECONDARY:
$(RES_DIR)/%.exe: %.cpp | $(RES_DIR)/.
	$(CC) $(COPTS) $< -o $@ $(LOPTS)

$(RES_DIR)/%.res:  $(RES_DIR)/%.exe
	$< > $@

%/.:; mkdir -p $*
